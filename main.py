from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import KeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.jobstores.memory import MemoryJobStore
from config import Config, load_config

config: Config = load_config()
BOT_TOKEN: str = config.tg_bot.token

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

scheduler = AsyncIOScheduler()

button_add = KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚ûï')
button_delete = KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚ùå')
button_list = KeyboardButton(text='–ú–æ–∏ –∑–∞–¥–∞—á–∏ üìã')

kb_builder = ReplyKeyboardBuilder()
kb_builder.row(button_add, button_delete, button_list, width=2)

tasks = {}


class DialogState(StatesGroup):
    add_task_text = State()
    add_task_time = State()
    delete_task = State()


async def send_reminder(user_id: int, task_text: str):
    await bot.send_message(
        chat_id=user_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n–ó–∞–¥–∞—á–∞: {task_text}"
    )


async def on_startup():
    scheduler.start()


@dp.message(CommandStart())
async def process_command_start(message: Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "üìå –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n"
        "‚Ä¢ –£–¥–∞–ª—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    await message.answer(
        text=welcome_text,
        reply_markup=kb_builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        )
    )


@dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚ûï')
async def process_answer_task(message: Message, state: FSMContext):
    await state.set_state(DialogState.add_task_text)
    await message.answer('üìù –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:')


@dp.message(DialogState.add_task_text)
async def process_answer_task_time(message: Message, state: FSMContext):
    await state.update_data(task_text=message.text)
    await state.set_state(DialogState.add_task_time)
    await message.answer("‚è≥–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                         "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")


@dp.message(DialogState.add_task_time)
async def process_add_task_time(message: Message, state: FSMContext):
    user_id = str(message.chat.id)
    data = await state.get_data()
    current_time = datetime.now() + timedelta(hours=3)
    try:
        task_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n")
        return

    if user_id not in tasks:
        tasks[user_id] = []
    new_task = {
        "id": len(tasks[user_id]) + 1,
        "text": data['task_text'],
        "time": current_time.strftime("%d.%m.%Y %H:%M"),
        "task_time": task_time.strftime("%d.%m.%Y %H:%M")
    }
    scheduler.add_job(
        send_reminder,
        trigger=DateTrigger(task_time - timedelta(hours=3)),
        args=(user_id, new_task['text']),
        id=f"reminder_{user_id}_{new_task['id']}"
    )
    print(task_time - timedelta(hours=3))
    tasks[str(user_id)].append(new_task)
    await state.clear()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                         f"üìå –¢–µ–∫—Å—Ç: {new_task['text']}\n"
                         f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {new_task['task_time']}")


@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚ùå')
async def process_answer_delete(message: Message, state: FSMContext):
    await message.answer('–í–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(DialogState.delete_task)


@dp.message(DialogState.delete_task)
async def process_delete_task(message: Message, state: FSMContext):
    user_id = str(message.chat.id)
    try:
        task_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    if user_id not in tasks or not tasks[user_id]:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
        await state.clear()
        return
    initial_count = len(tasks[user_id])
    tasks[user_id] = [task for task in tasks[user_id] if task["id"] != task_id]
    if len(tasks[user_id]) < initial_count:
        await message.answer(f'‚úÖ –ó–∞–¥–∞—á–∞ ‚Ññ{task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
    else:
        await message.answer(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ ‚Ññ{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await state.clear()


@dp.message(F.text == '–ú–æ–∏ –∑–∞–¥–∞—á–∏ üìã')
async def process_list_command(message: Message):
    user_id = str(message.chat.id)
    user_tasks = tasks.get(user_id, [])
    if not user_tasks:
        await message.answer('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á')
        return
    for task in user_tasks:
        await message.answer(f'–ó–∞–¥–∞—á–∞ ‚Ññ {task["id"]}\n\n'
                             f'üìù–ó–∞–¥–∞—á–∞: {task["text"]}\n'
                             f'‚è≥–°–æ–∑–¥–∞–Ω–∞: {task["time"]}\n'
                             f'‚è∞–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task["task_time"]}')


if __name__ == '__main__':
    dp.startup.register(on_startup)
    dp.run_polling(bot)
